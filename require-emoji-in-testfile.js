// require-test-emoji-in-describe-and-it.js
module.exports = {
  meta: {
    type: 'suggestion', // –¢–∏–ø –ø—Ä–∞–≤–∏–ª–∞
    fixable: 'code', // –ü—Ä–∞–≤–∏–ª–æ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥
    docs: {
      description:
        'Require üêõ emoji in describe blocks and üß™ emoji in it blocks in test files',
      category: 'Best Practices',
      recommended: false,
    },
    schema: [], // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
  },

  /**
   *
   * @param context
   */
  create(context) {
    return {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ describe –±–ª–æ–∫–æ–≤

      /**
       *
       * @param node
       */
      CallExpression(node) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–∑–æ–≤ describe
        if (node.callee.name === 'describe') {
          const firstArg = node.arguments[0];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç üêõ
          if (
            firstArg &&
            firstArg.type === 'Literal' &&
            typeof firstArg.value === 'string' &&
            !firstArg.value.includes('üêõ')
          ) {
            context.report({
              node: firstArg,
              message: 'Describe block should include üêõ emoji',

              /**
               *
               * @param fixer
               */
              fix(fixer) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º üêõ –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
                const newText = `'üêõ ${firstArg.value}'`;
                return fixer.replaceText(firstArg, newText);
              },
            });
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–∑–æ–≤ it
        if (node.callee.name === 'it') {
          const firstArg = node.arguments[0];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç üß™
          if (
            firstArg &&
            firstArg.type === 'Literal' &&
            typeof firstArg.value === 'string' &&
            !firstArg.value.includes('üß™')
          ) {
            context.report({
              node: firstArg,
              message: 'It block should include üß™ emoji',

              /**
               *
               * @param fixer
               */
              fix(fixer) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º üß™ –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
                const newText = `'üß™ ${firstArg.value}'`;
                return fixer.replaceText(firstArg, newText);
              },
            });
          }
        }
      },
    };
  },
};
