/**
 * ESLint –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
 *
 * @module empty-line-before-keywords
 * @type {import('eslint').Rule.RuleModule}
 */
module.exports = {
  /**
   * –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª–æ.
   *
   * @param {import('eslint').Rule.RuleContext} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª–∞ ESLint.
   * @returns {import('eslint').Rule.RuleListener} –û–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.
   */
  create(context) {
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    const keywords = ['clear mock', 'act', 'assert'];

    return {
      /**
       * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.
       */
      Program() {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const sourceCode = context.getSourceCode();
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
        const lines = sourceCode.getLines();

        lines.forEach((line, lineIndex) => {
          if (line.trim().startsWith('//')) {
            const commentText = line.toLowerCase();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            const containsKeyword = keywords.find((keyword) =>
              commentText.includes(keyword),
            );

            if (containsKeyword) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
              const previousLine = lines[lineIndex - 1];

              // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
              if (previousLine && previousLine.trim() !== '') {
                // –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                context.report({
                  /**
                   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.
                   *
                   * @param {import('eslint').Rule.RuleFixer} fixer - –û–±—ä–µ–∫—Ç –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
                   * @returns {import('eslint').Rule.Fix} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
                   */
                  fix(fixer) {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                    return fixer.insertTextBeforeRange(
                      [
                        sourceCode.getIndexFromLoc({
                          column: 0,
                          line: lineIndex + 1,
                        }),
                        0,
                      ],
                      '\n',
                    );
                  },
                  loc: {
                    end: { column: line.length, line: lineIndex + 1 },
                    start: { column: 0, line: lineIndex + 1 },
                  },
                  message: `ü§¨ –ü–µ—Ä–µ–¥ ${
                    containsKeyword[0].toUpperCase() + containsKeyword.slice(1)
                  } –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞`, // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                  node: context.getSourceCode().ast, // –£–∫–∞–∑—ã–≤–∞–µ–º —É–∑–µ–ª (–≤—Å—ë –¥–µ—Ä–µ–≤–æ)
                });
              }
            }
          }
        });
      },
    };
  },
  meta: {
    docs: {
      category: 'Stylistic Issues', // –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî —Å—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      description:
        '–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)', // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
      recommended: false, // –ù–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ESLint
    },
    fixable: 'whitespace', // –ü—Ä–∞–≤–∏–ª–æ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–±–µ–ª—ã
    schema: [], // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è
    type: 'layout', // –¢–∏–ø –ø—Ä–∞–≤–∏–ª–∞ ‚Äî —Å—Ç–∏–ª–µ–≤–æ–µ (–∫–∞—Å–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  },
};
