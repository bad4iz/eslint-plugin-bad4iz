// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –≤ JSDoc-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
// const jsdocRegex = /(?<=@(param|returns).*?)\[.*?\]*?\}/;

const jsdocRegex = /(?<=@(param|returns)[^{]*\{[^}]*?)\[.*?\](?!:)[^}]*?\}/;
// /(?<=@returns.*?)\[.*?\]/;
// /(?=@(param|returns|return))[^{}]*{[^{}]*\[\s*.*?\s*]*}/;

// @ts-check
/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  /**
   * –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏. –≠—Ç–∏ –≤—ã–∑–æ–≤—ã –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±—Ö–æ–¥–µ AST –Ω–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.
   *
   * @param {*} context - Context.
   * @returns {*}
   */
  create: function(context) {
    return {
      /**
       * Program.
       *
       * @returns {void}
       */
      Program() {
        const comments = context.sourceCode.getAllComments();
        comments?.forEach((comment_) => {
          const comment = comment_.value.trim();
          const lines = comment.split('\n');

          lines.forEach((line, index) => {
            const match = jsdocRegex.exec(line);
            if (match) {
              context.report({
                loc: {
                  end: {
                    column: match.index + match[0].length,
                    line: comment_.loc.start.line + index,
                  },
                  start: {
                    column: match.index,
                    line: comment_.loc.start.line + index,
                  },
                },
                message:
                  'üí© [] –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ JSDoc –∏–ø–æ–ª—å–∑—É–π Array',
                node: comment_,
              });
            }
          });

          //
          // // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
          // if (jsdocRegex.test(comment.value)) {
          // const relevantLine = comment.value
          //   .split('\n')
          //   .filter((line) => jsdocRegex.test(line));
          //
          // context.report({
          //   message:
          //     'üí© [] –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ JSDoc –∏–ø–æ–ª—å–∑—É–π Array \n' +
          //     relevantLine.join('\n') +
          //     '\n',
          //   node: comment,
          // });
          // }
        });
      },
    };
  },
  meta: {
    docs: {
      category: 'Best Practices',
      description: 'Disallow the use of empty arrays in JSDoc comments',
      recommended: true,
    },
    schema: [], // –ï—Å–ª–∏ –≤–∞—à–µ –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–¥–µ—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    type: 'problem',
  },
};
